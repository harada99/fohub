{"version":3,"sources":["containers/AddressBarPanel.js","actions/index.js","components/FolderTreeItem.jsx","containers/FolderTreePanel.js","components/PathItemList.jsx","containers/PathListPanel.js","containers/Hello.js","containers/HelloShort.js","containers/HelloProps.js","components/HelloPropsDataList.jsx","containers/HelloPropsData.js","components/HelloPropsLoopList.jsx","containers/HelloPropsLoop.js","components/App.jsx","reducers/folderTreeItem.js","reducers/pathItemList.js","reducers/index.js","index.js"],"names":["inputStyle","AddressBarPanel","connect","state","folderTreeItem","folderPath","dispatch","onSubmit","e","preventDefault","value","trim","console","log","type","rootpath","style","ref","node","divStyle","FolderTreeItem","createReactClass","onExpandClick","fullpath","isExpanded","this","props","onFolderClick","render","onClick","bind","color","name","children","map","child","FolderTreePanel","folderTreeItemClickEvent","toggleExpandClickEvent","PathItem","modified","isDirectory","PathItemList","pathItemList","pathItem","PathItemListPanel","Hello","num","Component","HelloShort","HelloProps","HelloPropsDataList","data","age","love","taro","hanako","HelloPropsData","HelloPropsLoopList","listItems","text","index","HelloPropsLoop","App","PathListPanel","initialState","createFolderTreeItem","getChildFolderTreeItemList","fs","window","require","path","names","readdirSync","join","statSync","push","toggleExpandChildren","isNewExpanded","newState","Object","assign","seekAndUpdateChildren","action","JSON","stringify","basename","length","createPathItem","toLocaleTimeString","date","getFullYear","getMonth","getDate","stat","mtime","explorerApp","combineReducers","store","createStore","document","getElementById"],"mappings":"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","file":"static/js/main.b17106b6.chunk.js","sourcesContent":["import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { openButtonClickEvent } from '../actions'\r\n\r\nconst inputStyle = {\"width\":\"300px\"}\r\n/* アドレスバーの画面とイベント発行 \r\n   dispatch後、reducers(folderTreeItem)が呼び出される。*/\r\nconst AddressBar = ({ dispatch }) => {\r\n  let folderPath\r\n  return (\r\n    <div>\r\n      <form onSubmit={e => {\r\n        e.preventDefault()\r\n        if (!folderPath.value.trim()) {\r\n          return\r\n        }\r\n        console.log('==> イベント発行(コンテナ) openButtonClickEvent rootPath=' + folderPath.value)\r\n        dispatch(openButtonClickEvent(folderPath.value))\r\n       }}>\r\n        <input style={inputStyle} ref={node => {\r\n          folderPath = node\r\n        }} />\r\n        <button type=\"submit\">\r\n          開く\r\n        </button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n/* フォルダツリーアイテムの状態の切り出し */\r\nconst mapStateToPorps = (state) => {\r\n  return {\r\n    folderTreeItem : state.folderTreeItem, \r\n  }\r\n}\r\n/* フォルダツリーアイテムの状態と画面(コンテナ)の接続(connect呼び出し) */\r\nconst AddressBarPanel = connect(\r\n  mapStateToPorps\r\n)(AddressBar)\r\n\r\nexport default AddressBarPanel","export const EXPAND_ROOT   = 'ルートフォルダの展開イベント'\r\nexport const TOGGLE_EXPAND = 'フォルダの展開/折畳イベント'\r\nexport const SHOW_PATHLIST = 'フォルダの一覧表示イベント'\r\nexport const SHOW_TABLEITEMLIST = 'テーブル表示'\r\n/* ルートフォルダの展開イベント(action) */\r\nexport const openButtonClickEvent = (rootpath) => ({\r\n  type: EXPAND_ROOT,\r\n  rootpath,\r\n})\r\n/* フォルダの展開/折畳イベント(action) */\r\nexport const toggleExpandClickEvent = (fullpath, isExpanded) => ({\r\n  type: TOGGLE_EXPAND,\r\n  fullpath,\r\n  isExpanded,\r\n})\r\n/* フォルダの一覧表示イベント(action) */\r\nexport const folderTreeItemClickEvent = (fullpath) => ({\r\n  type: SHOW_PATHLIST,\r\n  fullpath,\r\n})\r\nexport const tableItemListEvent = () => ({\r\n  type: SHOW_TABLEITEMLIST\r\n})","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport createReactClass from 'create-react-class'\r\n\r\nconst divStyle = { \"list-style\": \"none\" }\r\n/* フォルダツリーアイテムの描画＠＠＠ */\r\nconst FolderTreeItem = createReactClass({\r\n  /* フォルダ展開/折畳イベントのハンドラ */\r\n  onExpandClick: function(fullpath, isExpanded) {\r\n    this.props.onExpandClick(fullpath, isExpanded);\r\n  },\r\n  /* パスリスト表示イベントのハンドラ */\r\n  onFolderClick: function(fullpath) {\r\n    this.props.onFolderClick(fullpath);\r\n  },\r\n  /* フォルダツリーアイテムの描画処理 */\r\n  render : function() {\r\n    let folderTreeItem = this.props.folderTreeItem\r\n    return <div style={divStyle}>\r\n     <li>\r\n       <a onClick={() => { // 展開/折畳イベントの実行（bubblingさせないようbindする）\r\n         this.onExpandClick.bind(this, folderTreeItem.fullpath, folderTreeItem.isExpanded)\r\n         this.onExpandClick(folderTreeItem.fullpath, folderTreeItem.isExpanded)\r\n        }}>\r\n         {/* (+), (-)表示 */ \r\n           folderTreeItem.isExpanded ? <font color='red'>(-)</font> : <font color='blue'>(+)</font>\r\n         }\r\n        </a>\r\n        &nbsp;\r\n        <a onClick={()=>{ // パス一覧表示イベントの実行（bubblingさせないようbindする）\r\n          this.onFolderClick.bind(this, folderTreeItem.fullpath)\r\n          this.onFolderClick(folderTreeItem.fullpath)\r\n         }}>\r\n          {/* フォルダ名 */folderTreeItem.name} \r\n        </a>\r\n        <ul>\r\n        { // 子フォルダツリーアイテムの再帰描画\r\n          folderTreeItem.children.map(child =>\r\n            <FolderTreeItem \r\n              folderTreeItem={child} \r\n              onExpandClick={this.props.onExpandClick} \r\n              onFolderClick={this.props.onFolderClick} />\r\n          )\r\n        }\r\n        </ul>\r\n      </li>\r\n    </div>\r\n  }\r\n})\r\n/* フォルダツリーアイテムの型の定義*/\r\nFolderTreeItem.propTypes = {\r\n  folderTreeItem: PropTypes.object.isRequired,\r\n  onFolderClick: PropTypes.func.isRequired,\r\n  onExpandedClick: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default FolderTreeItem","import { connect } from 'react-redux'\r\nimport { folderTreeItemClickEvent, toggleExpandClickEvent } from '../actions'\r\nimport FolderTreeItem from '../components/FolderTreeItem'\r\n/* フォルダツリーのアイテムの状態の切り出し */\r\nconst mapStateToProps = (state) => ({\r\n  folderTreeItem: state.folderTreeItem,\r\n})\r\n/* イベントハンドラ関数とイベント(action)のマッピング\r\n   dispatch後、reducers(folderTreeItem)が呼び出される。*/\r\nconst mapDispatchToProps = (dispatch) => ({\r\n   onFolderClick: (fullpath) => {\r\n     console.log('==> イベント発行(コンテナ) folderTreeItemClickEvent fullpath=' + fullpath)\r\n     dispatch(folderTreeItemClickEvent(fullpath))\r\n   },\r\n   onExpandClick: (fullpath, isExpanded) => {\r\n     console.log('==> イベント発行(コンテナ) toggleExpandClickEvent fullpath=' + fullpath)\r\n     dispatch(toggleExpandClickEvent(fullpath, isExpanded))\r\n   },\r\n})\r\n/* フォルダアイテムの状態＋イベントマッピングと画面(コンテナ)の接続(connect呼び出し) */\r\nconst FolderTreePanel = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(FolderTreeItem)\r\n\r\nexport default FolderTreePanel","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n/* パスアイテムリストの描画 */\r\nconst PathItemList = ({pathItemList = []}) => (\r\n  <table>\r\n    <tr>\r\n      <th>Name</th>\r\n      <th>Modified</th>\r\n    </tr>\r\n    { \r\n      pathItemList.map(pathItem =>\r\n      <PathItem\r\n        {...pathItem} // パスアイテムの描画を呼び出す\r\n      />\r\n      )\r\n    }\r\n  </table>\r\n)\r\n/* パスアイテムリストの型の定義*/\r\nPathItemList.propTypes = {\r\n  pathItemList: PropTypes.arrayOf(PropTypes.shape({\r\n    name: PropTypes.string.isRequired,\r\n    modified: PropTypes.string.isRequired,\r\n    isDirectory: PropTypes.bool.isRequired\r\n  }).isRequired).isRequired,\r\n}\r\n/* パスアイテムの描画 */\r\nconst PathItem = ({ name, modified, isDirectory }) => (\r\n  <tr>\r\n    <td>\r\n      {/* 名前 */name}{/*ディレクトリなら[/]を付ける*/isDirectory ? \"/\" : \"\"}\r\n    </td>\r\n    <td>\r\n      {/* 更新日 */modified}\r\n    </td>\r\n  </tr>\r\n)\r\n/* パスアイテムの型の定義 */\r\nPathItem.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  modified: PropTypes.string.isRequired,\r\n  isDirectory: PropTypes.bool.isRequired\r\n}\r\n\r\nexport default PathItemList","import { connect } from 'react-redux'\r\nimport PathItemList from '../components/PathItemList'\r\n/* パスアイテムリストの状態の切り出し */\r\nconst mapStateToProps = (state)=> {\r\n  return {\r\n    pathItemList: state.pathItemList\r\n  }\r\n}\r\n/* パスアイテムリストの状態と画面(コンテナ)の接続(connect呼び出し) */\r\nconst PathItemListPanel = connect(\r\n  mapStateToProps\r\n)(PathItemList)\r\n\r\nexport default PathItemListPanel","import React ,{ Component } from 'react';\r\n\r\nclass Hello extends Component{\r\n  render() {\r\n    let num = 1;\r\n    num++;\r\n    return <div>Hello, world! num of {num}</div>;\r\n  }\r\n}\r\n\r\nexport default Hello;","import React from 'react'\r\n\r\nconst HelloShort = () =>{\r\n  let num = 1;\r\n  num++;\r\n  return <div>Hello, world short! num of {num}</div>;\r\n}\r\n\r\nexport default HelloShort;","import React from 'react'\r\n\r\nconst HelloProps = (props) =>{\r\n  return <div>Hello, my name is {props.name}.</div>\r\n  // const { name,age,love } = props.data;\r\n  // return (\r\n  //   <dl>\r\n  //     <dt>Name</dt><dd>{name}</dd>\r\n  //     <dt>Age</dt><dd>{age}</dd>\r\n  //     <dt>Love</dt><dd>{love}</dd>\r\n  //   </dl>\r\n  // );\r\n};\r\n\r\nexport default HelloProps;","import React from 'react'\r\n\r\nconst HelloPropsDataList = (props) =>{\r\n  const { name,age,love } = props.data;\r\n  return (\r\n    <dl>\r\n      <dt>Name</dt><dd>{name}</dd>\r\n      <dt>Age</dt><dd>{age}</dd>\r\n      <dt>Love</dt><dd>{love}</dd>\r\n    </dl>\r\n  );\r\n};\r\n\r\nexport default HelloPropsDataList;","import React from 'react'\r\nimport HelloPropsDataList from '../components/HelloPropsDataList'\r\n\r\nconst taro = {\r\n  name: \"Taro\",\r\n  age: 20,\r\n  love: \"Game\",\r\n}\r\nconst hanako = {\r\n  name: \"Hanako\",\r\n  age: 10,\r\n  love: \"Cats\",\r\n}\r\n\r\nconst HelloPropsData = () =>{\r\n  return (\r\n    <div>Props\r\n      <HelloPropsDataList data={taro} />\r\n      <HelloPropsDataList data={hanako} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HelloPropsData;","import React from 'react'\r\n\r\nconst HelloPropsLoopList = (props) =>{\r\n  const listItems = props.data.map((text, index) => {\r\n      // Fragment構文\r\n      return (\r\n      <>\r\n        <dt>{index}</dt>\r\n        <dd>{text}</dd>\r\n      </>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <dl>\r\n      {listItems}\r\n      </dl>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HelloPropsLoopList;","import React from 'react'\r\nimport HelloPropsLoopList from '../components/HelloPropsLoopList'\r\n\r\nconst HelloPropsLoop = () =>{\r\n  const listData = [\"boo\",\"foo\",\"woo\"];\r\n  return (\r\n    <HelloPropsLoopList data={listData} />\r\n  );\r\n};\r\n\r\nexport default HelloPropsLoop;","import React from 'react'\r\nimport AddressBarPanel from '../containers/AddressBarPanel'\r\nimport FolderTreePanel from '../containers/FolderTreePanel'\r\nimport PathListPanel from '../containers/PathListPanel'\r\nimport Hello from '../containers/Hello'\r\nimport HelloShort from '../containers/HelloShort'\r\nimport HelloProps from '../containers/HelloProps'\r\nimport HelloPropsData from '../containers/HelloPropsData'\r\nimport HelloPropsLoop from '../containers/HelloPropsLoop'\r\n//import TablePanel from '../containers/TablePanel'\r\n/* アプリケーション画面の定義＠ */\r\nconst App = () => (\r\n  <div>\r\n    <AddressBarPanel />\r\n    <hr/>\r\n    <FolderTreePanel />\r\n    <hr/>\r\n    <PathListPanel />\r\n    <hr/>\r\n    Lesson 1: <Hello /><HelloShort />\r\n    <hr/>\r\n    Lesson 2: \r\n    <HelloProps name=\"Taro\" />\r\n    <br/>\r\n    <HelloPropsData />\r\n    <br/>\r\n    <HelloPropsLoop />\r\n    <hr/>\r\n  </div>\r\n)\r\nexport default App","import {EXPAND_ROOT, TOGGLE_EXPAND} from '../actions'\r\n/* フォルダアイテムの初期値 */\r\nconst initialState = {\r\n  name:'アドレスバーにフォルダパスを貼り付けて「開く」を押してください', \r\n  fullpath:'', \r\n  children:[],\r\n  isExpanded: false,\r\n}\r\n/* フォルダアイテムの状態更新 */\r\nconst folderTreeItem = (state = initialState, action) => {\r\n  console.log(\"--イベント(action)の内容---\")\r\n  console.log(JSON.stringify(action))\r\n  console.log(\"--------------------------\")\r\n  console.log(\"--変更前の状態(state)------\")\r\n  console.log(state)\r\n  console.log(\"--------------------------\")\r\n  switch (action.type) {\r\n    case EXPAND_ROOT: // 'ルートフォルダの展開イベント'\r\n      const path = window.require('path')\r\n      let name = path.basename(action.rootpath)\r\n      let folderTreeItem = createFolderTreeItem(name, action.rootpath)\r\n      return folderTreeItem\r\n    case TOGGLE_EXPAND: // 'フォルダの展開/折畳イベント'\r\n      if( action.fullpath === '')\r\n        return state\r\n      console.log('* 対象のフォルダパス=' + action.fullpath)\r\n      console.log('* フォルダの展開状態=' + action.isExpanded)\r\n      if(action.isExpanded === false) {\r\n        let children = getChildFolderTreeItemList(action.fullpath)\r\n        console.log(\"* 展開する 子の数=\" + children.length)\r\n        return toggleExpandChildren(state, action.fullpath, true, children)\r\n      }\r\n      else {\r\n        console.log(\"* 折り畳む\")\r\n        return toggleExpandChildren(state, action.fullpath, false, [])\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n/* フォルダアイテムの作成 */\r\nconst createFolderTreeItem = (name, fullpath, children = []) => {\r\n  return {\r\n    name: name,\r\n    fullpath: fullpath,\r\n    children: children,\r\n    isExpanded: false,\r\n  }\r\n}\r\n/* 子のフォルダアイテム一覧の取得 */\r\nconst getChildFolderTreeItemList = (folderPath) => {\r\n  const fs = window.require('fs')\r\n  const path = window.require('path')\r\n  let names = fs.readdirSync(folderPath)\r\n  let children = []\r\n  names.map(name => {\r\n    let fullpath = path.join(folderPath, name)\r\n    let stat = fs.statSync(fullpath)\r\n    if(stat.isDirectory()) {\r\n        children.push(createFolderTreeItem(name,fullpath))\r\n    }\r\n  })\r\n  return children\r\n}\r\n/* サブフォルダと展開状態の入れ替え */\r\nconst toggleExpandChildren = (state, fullpath, isNewExpanded, children) => {\r\n  let newState = Object.assign({}, state)\r\n  seekAndUpdateChildren(newState, fullpath, isNewExpanded, children)\r\n  return newState\r\n}\r\n/* 子のフォルダツリーアイテムの検索と更新(再帰検索) */\r\nconst seekAndUpdateChildren = (folderTreeItem, fullpath, isNewExpanded, children) => {\r\n  if( folderTreeItem.fullpath === fullpath ) {\r\n     folderTreeItem.children = children\r\n     folderTreeItem.isExpanded = isNewExpanded\r\n     return true\r\n  }\r\n  folderTreeItem.children.map( child => {\r\n     if( seekAndUpdateChildren(child, fullpath, isNewExpanded, children) )\r\n       return true\r\n  })\r\n  return false\r\n}\r\n\r\nexport default folderTreeItem","import {SHOW_PATHLIST} from '../actions'\r\n/* パスリストの初期値 */\r\nconst initialState = []\r\n/* パスリストの状態の更新 */\r\nconst pathItemList = (state = initialState, action) => {\r\n  console.log(\"--イベント(action)の内容---\")\r\n  console.log(JSON.stringify(action))\r\n  console.log(\"--------------------------\")\r\n  console.log(\"--変更前の状態(state)------\")\r\n  console.log(state)\r\n  console.log(\"--------------------------\")\r\n  switch (action.type) {\r\n    case SHOW_PATHLIST: // 'フォルダの一覧表示イベント'\r\n      let fullpath = action.fullpath\r\n      console.log('* 表示するフォルダパス=' + fullpath)\r\n      const fs = window.require('fs')\r\n      const path = window.require('path')\r\n      let names = fs.readdirSync(fullpath)\r\n      let pathItemList = []\r\n      names.map(name => {\r\n        let stat = fs.statSync(path.join(fullpath, name))\r\n        let modified = toLocaleTimeString(stat.mtime)\r\n        let isDirectory = stat.isDirectory()\r\n        pathItemList.push(createPathItem(name,modified,isDirectory))\r\n      })\r\n      console.log(\"* 表示するパス一覧の数=\" + pathItemList.length)\r\n      return pathItemList\r\n    default:\r\n      return state\r\n  }\r\n}\r\n/* パスアイテムの作成 */\r\nconst createPathItem = (name, modified, isDirectory) => {\r\n  return {\r\n    name: name,\r\n    modified: modified,\r\n    isDirectory: isDirectory,\r\n  }\r\n}\r\n/* 時刻の文字列変換 */\r\nconst toLocaleTimeString = ( date ) => {\r\n  return [\r\n      date.getFullYear(),\r\n      date.getMonth() + 1,\r\n      date.getDate()\r\n      ].join( '/' ) + ' '\r\n      + date.toLocaleTimeString();\r\n}\r\n\r\nexport default pathItemList","import { combineReducers } from 'redux'\r\nimport folderTreeItem from './folderTreeItem'\r\nimport pathItemList from './pathItemList'\r\n/* 分割した状態遷移の関数群(reducers)の結合(combineReducers呼び出し) */\r\nconst explorerApp = combineReducers({\r\n  folderTreeItem,\r\n  pathItemList,\r\n})\r\n\r\nexport default explorerApp","import React from 'react'\r\nimport { render } from 'react-dom'\r\nimport { createStore } from 'redux'\r\nimport { Provider } from 'react-redux'\r\nimport App from './components/App'\r\nimport explorerApp from './reducers'\r\n/* 状態遷移(reducers)をstoreとして取得 */\r\nconst store = createStore(explorerApp)\r\n/* アプリケーションをstoreを指定して描画 */\r\nrender(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)"],"sourceRoot":""}