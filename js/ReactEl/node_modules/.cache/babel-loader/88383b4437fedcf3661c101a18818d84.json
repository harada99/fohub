{"ast":null,"code":"import React from'react';import createReactClass from'create-react-class';var divStyle={\"list-style\":\"none\"};/* フォルダツリーアイテムの描画＠＠＠ */var FolderTreeItem=createReactClass({displayName:\"FolderTreeItem\",/* フォルダ展開/折畳イベントのハンドラ */onExpandClick:function onExpandClick(fullpath,isExpanded){this.props.onExpandClick(fullpath,isExpanded);},/* パスリスト表示イベントのハンドラ */onFolderClick:function onFolderClick(fullpath){this.props.onFolderClick(fullpath);},/* フォルダツリーアイテムの描画処理 */render:function render(){var _this=this;var folderTreeItem=this.props.folderTreeItem;return/*#__PURE__*/React.createElement(\"div\",{style:divStyle},/*#__PURE__*/React.createElement(\"li\",null,/*#__PURE__*/React.createElement(\"a\",{onClick:function onClick(){// 展開/折畳イベントの実行（bubblingさせないようbindする）\n_this.onExpandClick.bind(_this,folderTreeItem.fullpath,folderTreeItem.isExpanded);_this.onExpandClick(folderTreeItem.fullpath,folderTreeItem.isExpanded);}},/* (+), (-)表示 */folderTreeItem.isExpanded?/*#__PURE__*/React.createElement(\"font\",{color:\"red\"},\"(-)\"):/*#__PURE__*/React.createElement(\"font\",{color:\"blue\"},\"(+)\")),\"\\xA0\",/*#__PURE__*/React.createElement(\"a\",{onClick:function onClick(){// パス一覧表示イベントの実行（bubblingさせないようbindする）\n_this.onFolderClick.bind(_this,folderTreeItem.fullpath);_this.onFolderClick(folderTreeItem.fullpath);}},/* フォルダ名 */folderTreeItem.name),/*#__PURE__*/React.createElement(\"ul\",null,// 子フォルダツリーアイテムの再帰描画\nfolderTreeItem.children.map(function(child){return/*#__PURE__*/React.createElement(FolderTreeItem,{folderTreeItem:child,onExpandClick:_this.props.onExpandClick,onFolderClick:_this.props.onFolderClick});}))));}});/* フォルダツリーアイテムの型の定義*/export default FolderTreeItem;","map":{"version":3,"sources":["D:/opt/wss_study/ElectronStudy2/file-explorer-handson/src/components/FolderTreeItem.jsx"],"names":["React","createReactClass","divStyle","FolderTreeItem","onExpandClick","fullpath","isExpanded","props","onFolderClick","render","folderTreeItem","bind","name","children","map","child"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,MAAOC,CAAAA,gBAAP,KAA6B,oBAA7B,CAEA,GAAMC,CAAAA,QAAQ,CAAG,CAAE,aAAc,MAAhB,CAAjB,CACA,uBACA,GAAMC,CAAAA,cAAc,CAAGF,gBAAgB,CAAC,8BACtC,wBACAG,aAAa,CAAE,uBAASC,QAAT,CAAmBC,UAAnB,CAA+B,CAC5C,KAAKC,KAAL,CAAWH,aAAX,CAAyBC,QAAzB,CAAmCC,UAAnC,EACD,CAJqC,CAKtC,sBACAE,aAAa,CAAE,uBAASH,QAAT,CAAmB,CAChC,KAAKE,KAAL,CAAWC,aAAX,CAAyBH,QAAzB,EACD,CARqC,CAStC,sBACAI,MAAM,CAAG,iBAAW,gBAClB,GAAIC,CAAAA,cAAc,CAAG,KAAKH,KAAL,CAAWG,cAAhC,CACA,mBAAO,2BAAK,KAAK,CAAER,QAAZ,eACN,2CACE,yBAAG,OAAO,CAAE,kBAAM,CAAE;AAClB,KAAI,CAACE,aAAL,CAAmBO,IAAnB,CAAwB,KAAxB,CAA8BD,cAAc,CAACL,QAA7C,CAAuDK,cAAc,CAACJ,UAAtE,EACA,KAAI,CAACF,aAAL,CAAmBM,cAAc,CAACL,QAAlC,CAA4CK,cAAc,CAACJ,UAA3D,EACA,CAHF,EAIG,gBACCI,cAAc,CAACJ,UAAf,cAA4B,4BAAM,KAAK,CAAC,KAAZ,QAA5B,cAA2D,4BAAM,KAAK,CAAC,MAAZ,QAL/D,CADF,qBAUG,yBAAG,OAAO,CAAE,kBAAI,CAAE;AAChB,KAAI,CAACE,aAAL,CAAmBG,IAAnB,CAAwB,KAAxB,CAA8BD,cAAc,CAACL,QAA7C,EACA,KAAI,CAACG,aAAL,CAAmBE,cAAc,CAACL,QAAlC,EACA,CAHF,EAIG,WAAWK,cAAc,CAACE,IAJ7B,CAVH,cAgBG,8BACE;AACAF,cAAc,CAACG,QAAf,CAAwBC,GAAxB,CAA4B,SAAAC,KAAK,qBAC/B,oBAAC,cAAD,EACE,cAAc,CAAEA,KADlB,CAEE,aAAa,CAAE,KAAI,CAACR,KAAL,CAAWH,aAF5B,CAGE,aAAa,CAAE,KAAI,CAACG,KAAL,CAAWC,aAH5B,EAD+B,EAAjC,CAFF,CAhBH,CADM,CAAP,CA6BD,CAzCqC,CAAD,CAAvC,CA2CA,qBAOA,cAAeL,CAAAA,cAAf","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport createReactClass from 'create-react-class'\r\n\r\nconst divStyle = { \"list-style\": \"none\" }\r\n/* フォルダツリーアイテムの描画＠＠＠ */\r\nconst FolderTreeItem = createReactClass({\r\n  /* フォルダ展開/折畳イベントのハンドラ */\r\n  onExpandClick: function(fullpath, isExpanded) {\r\n    this.props.onExpandClick(fullpath, isExpanded);\r\n  },\r\n  /* パスリスト表示イベントのハンドラ */\r\n  onFolderClick: function(fullpath) {\r\n    this.props.onFolderClick(fullpath);\r\n  },\r\n  /* フォルダツリーアイテムの描画処理 */\r\n  render : function() {\r\n    let folderTreeItem = this.props.folderTreeItem\r\n    return <div style={divStyle}>\r\n     <li>\r\n       <a onClick={() => { // 展開/折畳イベントの実行（bubblingさせないようbindする）\r\n         this.onExpandClick.bind(this, folderTreeItem.fullpath, folderTreeItem.isExpanded)\r\n         this.onExpandClick(folderTreeItem.fullpath, folderTreeItem.isExpanded)\r\n        }}>\r\n         {/* (+), (-)表示 */ \r\n           folderTreeItem.isExpanded ? <font color='red'>(-)</font> : <font color='blue'>(+)</font>\r\n         }\r\n        </a>\r\n        &nbsp;\r\n        <a onClick={()=>{ // パス一覧表示イベントの実行（bubblingさせないようbindする）\r\n          this.onFolderClick.bind(this, folderTreeItem.fullpath)\r\n          this.onFolderClick(folderTreeItem.fullpath)\r\n         }}>\r\n          {/* フォルダ名 */folderTreeItem.name} \r\n        </a>\r\n        <ul>\r\n        { // 子フォルダツリーアイテムの再帰描画\r\n          folderTreeItem.children.map(child =>\r\n            <FolderTreeItem \r\n              folderTreeItem={child} \r\n              onExpandClick={this.props.onExpandClick} \r\n              onFolderClick={this.props.onFolderClick} />\r\n          )\r\n        }\r\n        </ul>\r\n      </li>\r\n    </div>\r\n  }\r\n})\r\n/* フォルダツリーアイテムの型の定義*/\r\nFolderTreeItem.propTypes = {\r\n  folderTreeItem: PropTypes.object.isRequired,\r\n  onFolderClick: PropTypes.func.isRequired,\r\n  onExpandedClick: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default FolderTreeItem"]},"metadata":{},"sourceType":"module"}