{"ast":null,"code":"import{EXPAND_ROOT,TOGGLE_EXPAND}from'../actions';/* フォルダアイテムの初期値 */var initialState={name:'アドレスバーにフォルダパスを貼り付けて「開く」を押してください',fullpath:'',children:[],isExpanded:false};/* フォルダアイテムの状態更新 */var folderTreeItem=function folderTreeItem(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;console.log(\"--イベント(action)の内容---\");console.log(JSON.stringify(action));console.log(\"--------------------------\");console.log(\"--変更前の状態(state)------\");console.log(state);console.log(\"--------------------------\");switch(action.type){case EXPAND_ROOT:// 'ルートフォルダの展開イベント'\nvar path=window.require('path');var name=path.basename(action.rootpath);var _folderTreeItem=createFolderTreeItem(name,action.rootpath);return _folderTreeItem;case TOGGLE_EXPAND:// 'フォルダの展開/折畳イベント'\nif(action.fullpath==='')return state;console.log('* 対象のフォルダパス='+action.fullpath);console.log('* フォルダの展開状態='+action.isExpanded);if(action.isExpanded===false){var children=getChildFolderTreeItemList(action.fullpath);console.log(\"* 展開する 子の数=\"+children.length);return toggleExpandChildren(state,action.fullpath,true,children);}else{console.log(\"* 折り畳む\");return toggleExpandChildren(state,action.fullpath,false,[]);}default:return state;}};/* フォルダアイテムの作成 */var createFolderTreeItem=function createFolderTreeItem(name,fullpath){var children=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[];return{name:name,fullpath:fullpath,children:children,isExpanded:false};};/* 子のフォルダアイテム一覧の取得 */var getChildFolderTreeItemList=function getChildFolderTreeItemList(folderPath){var fs=window.require('fs');var path=window.require('path');var names=fs.readdirSync(folderPath);var children=[];names.map(function(name){var fullpath=path.join(folderPath,name);var stat=fs.statSync(fullpath);if(stat.isDirectory()){children.push(createFolderTreeItem(name,fullpath));}});return children;};/* サブフォルダと展開状態の入れ替え */var toggleExpandChildren=function toggleExpandChildren(state,fullpath,isNewExpanded,children){var newState=Object.assign({},state);seekAndUpdateChildren(newState,fullpath,isNewExpanded,children);return newState;};/* 子のフォルダツリーアイテムの検索と更新(再帰検索) */var seekAndUpdateChildren=function seekAndUpdateChildren(folderTreeItem,fullpath,isNewExpanded,children){if(folderTreeItem.fullpath===fullpath){folderTreeItem.children=children;folderTreeItem.isExpanded=isNewExpanded;return true;}folderTreeItem.children.map(function(child){if(seekAndUpdateChildren(child,fullpath,isNewExpanded,children))return true;});return false;};export default folderTreeItem;","map":{"version":3,"sources":["D:/opt/wss_study/ReactEl/src/reducers/folderTreeItem.js"],"names":["EXPAND_ROOT","TOGGLE_EXPAND","initialState","name","fullpath","children","isExpanded","folderTreeItem","state","action","console","log","JSON","stringify","type","path","window","require","basename","rootpath","createFolderTreeItem","getChildFolderTreeItemList","length","toggleExpandChildren","folderPath","fs","names","readdirSync","map","join","stat","statSync","isDirectory","push","isNewExpanded","newState","Object","assign","seekAndUpdateChildren","child"],"mappings":"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","sourcesContent":["import {EXPAND_ROOT, TOGGLE_EXPAND} from '../actions'\r\n/* フォルダアイテムの初期値 */\r\nconst initialState = {\r\n  name:'アドレスバーにフォルダパスを貼り付けて「開く」を押してください', \r\n  fullpath:'', \r\n  children:[],\r\n  isExpanded: false,\r\n}\r\n/* フォルダアイテムの状態更新 */\r\nconst folderTreeItem = (state = initialState, action) => {\r\n  console.log(\"--イベント(action)の内容---\")\r\n  console.log(JSON.stringify(action))\r\n  console.log(\"--------------------------\")\r\n  console.log(\"--変更前の状態(state)------\")\r\n  console.log(state)\r\n  console.log(\"--------------------------\")\r\n  switch (action.type) {\r\n    case EXPAND_ROOT: // 'ルートフォルダの展開イベント'\r\n      const path = window.require('path')\r\n      let name = path.basename(action.rootpath)\r\n      let folderTreeItem = createFolderTreeItem(name, action.rootpath)\r\n      return folderTreeItem\r\n    case TOGGLE_EXPAND: // 'フォルダの展開/折畳イベント'\r\n      if( action.fullpath === '')\r\n        return state\r\n      console.log('* 対象のフォルダパス=' + action.fullpath)\r\n      console.log('* フォルダの展開状態=' + action.isExpanded)\r\n      if(action.isExpanded === false) {\r\n        let children = getChildFolderTreeItemList(action.fullpath)\r\n        console.log(\"* 展開する 子の数=\" + children.length)\r\n        return toggleExpandChildren(state, action.fullpath, true, children)\r\n      }\r\n      else {\r\n        console.log(\"* 折り畳む\")\r\n        return toggleExpandChildren(state, action.fullpath, false, [])\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n/* フォルダアイテムの作成 */\r\nconst createFolderTreeItem = (name, fullpath, children = []) => {\r\n  return {\r\n    name: name,\r\n    fullpath: fullpath,\r\n    children: children,\r\n    isExpanded: false,\r\n  }\r\n}\r\n/* 子のフォルダアイテム一覧の取得 */\r\nconst getChildFolderTreeItemList = (folderPath) => {\r\n  const fs = window.require('fs')\r\n  const path = window.require('path')\r\n  let names = fs.readdirSync(folderPath)\r\n  let children = []\r\n  names.map(name => {\r\n    let fullpath = path.join(folderPath, name)\r\n    let stat = fs.statSync(fullpath)\r\n    if(stat.isDirectory()) {\r\n        children.push(createFolderTreeItem(name,fullpath))\r\n    }\r\n  })\r\n  return children\r\n}\r\n/* サブフォルダと展開状態の入れ替え */\r\nconst toggleExpandChildren = (state, fullpath, isNewExpanded, children) => {\r\n  let newState = Object.assign({}, state)\r\n  seekAndUpdateChildren(newState, fullpath, isNewExpanded, children)\r\n  return newState\r\n}\r\n/* 子のフォルダツリーアイテムの検索と更新(再帰検索) */\r\nconst seekAndUpdateChildren = (folderTreeItem, fullpath, isNewExpanded, children) => {\r\n  if( folderTreeItem.fullpath === fullpath ) {\r\n     folderTreeItem.children = children\r\n     folderTreeItem.isExpanded = isNewExpanded\r\n     return true\r\n  }\r\n  folderTreeItem.children.map( child => {\r\n     if( seekAndUpdateChildren(child, fullpath, isNewExpanded, children) )\r\n       return true\r\n  })\r\n  return false\r\n}\r\n\r\nexport default folderTreeItem"]},"metadata":{},"sourceType":"module"}